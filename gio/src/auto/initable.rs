// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Cancellable;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "GInitable")]
    pub struct Initable(Interface<ffi::GInitable, ffi::GInitableIface>);

    match fn {
        type_ => || ffi::g_initable_get_type(),
    }
}

impl Initable {
    //#[doc(alias = "g_initable_new")]
    //pub fn new<P: IsA<Cancellable>>(object_type: glib::types::Type, cancellable: Option<&P>, error: &mut glib::Error, first_property_name: Option<&str>, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> glib::Object {
    //    unsafe { TODO: call ffi:g_initable_new() }
    //}

    //#[doc(alias = "g_initable_new_valist")]
    //pub fn new_valist<P: IsA<Cancellable>>(object_type: glib::types::Type, first_property_name: &str, var_args: /*Unknown conversion*//*Unimplemented*/Unsupported, cancellable: Option<&P>) -> Result<glib::Object, glib::Error> {
    //    unsafe { TODO: call ffi:g_initable_new_valist() }
    //}

    //#[cfg_attr(feature = "v2_54", deprecated = "Since 2.54")]
    //#[doc(alias = "g_initable_newv")]
    //pub fn newv<P: IsA<Cancellable>>(object_type: glib::types::Type, parameters: /*Ignored*/&[&glib::Parameter], cancellable: Option<&P>) -> Result<glib::Object, glib::Error> {
    //    unsafe { TODO: call ffi:g_initable_newv() }
    //}
}

pub const NONE_INITABLE: Option<&Initable> = None;

pub trait InitableExt: 'static {
    #[doc(alias = "g_initable_init")]
    fn init<P: IsA<Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), glib::Error>;
}

impl<O: IsA<Initable>> InitableExt for O {
    fn init<P: IsA<Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_initable_init(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl fmt::Display for Initable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Initable")
    }
}
